{"version":3,"sources":["components/memo-game/SingleCard.js","components/memo-game/CardList.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","CardList","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","setSound","useStopwatch","autoStart","seconds","minutes","start","reset","pause","shuffleCards","shuffledCards","sort","Math","random","map","id","audio","Audio","spell","play","useEffect","setTimeout","bingo","bingoSound","prevCards","resetTurn","every","prevTurns","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.381fa9cd.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport const SingleCard = ({card, handleChoice, flipped, disabled}) => {\r\n  const handleClick = () => {\r\n    if(!disabled){\r\n      handleChoice(card)\r\n      // handleSound(card)\r\n    }\r\n  }\r\n\r\n    return ( \r\n      <div className=\"card\">\r\n        <div className={flipped ? \"flipped\" : \"\" } >\r\n          <img className=\"front\" src={card.src} alt=\"card front\" />\r\n          <img \r\n            className=\"back\"\r\n            src=\"./img/cover.png\"\r\n            onClick={handleClick}\r\n            alt=\"card back\" />\r\n        </div>\r\n      </div>\r\n     );\r\n}","import { useState, useEffect } from 'react'\r\nimport { useStopwatch } from 'react-timer-hook';\r\n\r\nimport './CardList.css'\r\nimport { SingleCard } from './SingleCard'\r\n\r\nconst cardImages = [\r\n    // { \"src\": \"/img/helmet-1.png\", matched: false },\r\n    // { \"src\": \"/img/potion-1.png\", matched: false },\r\n    // { \"src\": \"/img/ring-1.png\", matched: false },\r\n    // { \"src\": \"/img/scroll-1.png\", matched: false },\r\n    // { \"src\": \"/img/shield-1.png\", matched: false },\r\n    // { \"src\": \"/img/sword-1.png\", matched: false },\r\n    { \"src\": \"./img/canario.png\", matched: false, \"spell\": \"./sound/canario.m4a\" },\r\n    { \"src\": \"./img/caracol.png\", matched: false, \"spell\": \"./sound/caracol.m4a\" },\r\n    { \"src\": \"./img/chinchilla.png\", matched: false, \"spell\": \"./sound/chinchilla.m4a\" },\r\n    { \"src\": \"./img/cobaya.png\", matched: false, \"spell\": \"./sound/cobaya.m4a\" },\r\n    { \"src\": \"./img/conejo.png\", matched: false, \"spell\": \"./sound/conejo.m4a\" },\r\n    { \"src\": \"./img/gato.png\", matched: false, \"spell\": \"./sound/gato.m4a\" },\r\n    { \"src\": \"./img/hamster.png\", matched: false, \"spell\": \"./sound/hamster.m4a\" },\r\n    { \"src\": \"./img/lagarto.png\", matched: false, \"spell\": \"./sound/lagarto.m4a\" },\r\n    { \"src\": \"./img/loro.png\", matched: false, \"spell\": \"./sound/loro.m4a\" },\r\n    { \"src\": \"./img/perro.png\", matched: false, \"spell\": \"/sound/perro.m4a\" },\r\n    { \"src\": \"./img/pez.png\", matched: false, \"spell\": \"./sound/pez.m4a\" },\r\n    { \"src\": \"./img/rata.png\", matched: false, \"spell\": \"./sound/rata.m4a\" },\r\n    { \"src\": \"./img/raton.png\", matched: false, \"spell\": \"./sound/raton.m4a\" },\r\n    { \"src\": \"./img/tortuga.png\", matched: false, \"spell\": \"./sound/tortuga.m4a\" },\r\n  ]\r\n\r\nexport const CardList = () => {\r\n    const [cards, setCards] = useState([])\r\n    const [turns, setTurns] = useState(0)\r\n    const [choiceOne, setChoiceOne] = useState(null)\r\n    const [choiceTwo, setChoiceTwo] = useState(null)\r\n    const [disabled, setDisabled] = useState(false)\r\n    const [sound, setSound] = useState(null)   \r\n\r\n    const { seconds, minutes, start, reset, pause} = useStopwatch({ autoStart: false });\r\n\r\n  //shuffle cards\r\n  const shuffleCards = () => {\r\n    const shuffledCards = [...cardImages, ...cardImages]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map((card) => ({ ...card, id: Math.random() }))\r\n    \r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)  \r\n    setCards(shuffledCards)\r\n    setTurns(0)\r\n    reset({}, false);\r\n  }  \r\n  // console.log(cards, turns)\r\n\r\n  // var stopwatchOffset = new Date();\r\n  // stopwatchOffset.setSeconds(stopwatchOffset.getSeconds());\r\n\r\n\r\n  //handle a choice\r\n  const handleChoice = (card) => {\r\n    // console.log(card)\r\n    const audio = new Audio(card.spell)\r\n    setSound(audio.play())\r\n\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\r\n  }\r\n \r\n  // const handleSound = (card) => {\r\n  //   const audio = new Audio(card.spell)\r\n  //   setSound(audio.play())\r\n  //   // console.log(audio.play)\r\n  // }\r\n\r\n  const bingoSound = () => {\r\n    const bingo = new Audio ('./sound/bingo.m4a')\r\n      setSound(bingo.play())\r\n  }\r\n\r\n useEffect(() => {\r\n  if(choiceOne && !choiceTwo) {\r\n    if(turns === 0) {\r\n      start() \r\n    } \r\n  } \r\n },[choiceOne])\r\n\r\n  //compare 2 selected cards\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true)       \r\n      if (choiceOne.src === choiceTwo.src) {\r\n        setTimeout( () => bingoSound(), 800)\r\n        setCards(prevCards => {\r\n          return prevCards.map(card => {\r\n            if(card.src === choiceOne.src) {\r\n              return {...card, matched:true}\r\n            } else {\r\n              return card\r\n            }\r\n          })\r\n        })\r\n      // cards.every(card => card.matched === true)\r\n      setTimeout( () => resetTurn(), 2000)\r\n      }  else {\r\n        // console.log('those cards DO NOT match')\r\n        setTimeout( () => resetTurn(), 1000)\r\n      }\r\n    }\r\n  }, [choiceOne, choiceTwo])\r\n\r\n  useEffect(() => {\r\n      if(cards.every(card => card.matched === true)) {\r\n        pause()\r\n      }\r\n  }, [choiceTwo])\r\n\r\n  // console.log(cards)\r\n\r\n  // reset choices & increase turn\r\n  const resetTurn = () => {\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setTurns(prevTurns => prevTurns + 1)\r\n    setDisabled(false)\r\n  }\r\n\r\n    // start new game automatically\r\n    useEffect(() => {\r\n      shuffleCards()\r\n    }, [])\r\n\r\n    return ( \r\n        <div className=\"CardList\">\r\n        <h3>Magic Match</h3>\r\n        <div className=\"counter-box\">\r\n          <button onClick={shuffleCards}>New Game</button>\r\n          <div className=\"counter\">\r\n            <span>Timer: {minutes}:{seconds} </span>\r\n            <span> Turns: {turns}</span>\r\n          </div>  \r\n        </div>\r\n      \r\n        <div className=\"card-grid\">\r\n          {cards.map(card =>(\r\n            <SingleCard \r\n              key={card.id}\r\n              card={card}\r\n              handleChoice={handleChoice}\r\n              flipped={card === choiceOne || card === choiceTwo || card.matched }\r\n              disabled={disabled}\r\n            // handleSound={handleSound}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n     );\r\n}","import './App.css';\nimport { CardList } from './components/memo-game/CardList';\n\n\nfunction App() {\n\n  return (\n    <CardList />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}